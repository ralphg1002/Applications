from pytube import YouTube
from tkinter import filedialog
from tkinter import ttk
from tkinter import *
import re
import threading

#Choose File Window App
class FileApplication:
    
    def __init__(self, root):
        #Configure Window
        self.root = root
        self.root.grid_rowconfigure(0, weight= 2)
        self.root.grid_columnconfigure(0, weight= 1)
        self.root.config(bg= '#ffdddd')
        
        #Main/title label
        mainLabel = Label(self.root, text= 'YouTube Download Manager', bg= '#ccffcc', fg= 'orange', font= ('Type Xero', 70))
        mainLabel.grid(pady= (0, 10))

        #Label above link entry
        linkLabel = Label(self.root, text= 'Paste Your YouTube Video Below:', font= ('Type Xero', 30))
        linkLabel.grid(pady= (0, 20))

        #Customize entry where user pastes YouTube link
        self.youtubeLink = StringVar()
        self.youtubeEntry = Entry(self.root, width= 70, textvariable= self.youtubeLink, font= ('Agency Fb', 25), fg= 'light sky blue')
        self.youtubeEntry.grid(pady= (0, 15), ipady= 2)
        #Display error message if link is invalid
        self.entryError = Label(self.root, text= '', font= ('Concert One', 20), bg= '#ffdddd')
        self.entryError.grid(pady= (0, 8))

        #Feature for user to choose where to download YouTube File
        self.fileSaveLabel = Label(self.root, text= 'Choose File Location', font= ('Concert One', 30))
        self.fileSaveLabel.grid()
        self.fileSaveButton = Button(self.root, text= 'Open File', font=('Bell MT', 15), command= self.openFile)
        self.fileSaveButton.grid(pady= (10, 3))

        #Label that displays chosen directory to save download
        self.fileLocationLabel = Label(self.root, text= '', font= ('Dubai', 25), bg= '#ffdddd')
        self.fileLocationLabel.grid()

        #Feature for user to choose file download type
        self.chooseDownload = Label(self.root, text = 'Choose the Download Type', font = ('Variety', 30))
        self.chooseDownload.grid()
        self.downloadChoices = [('Audio Mp3', 1), ('Video Mp4', 2)]
        self.userChoice = StringVar()
        self.userChoice.set(1) #By deafult set to download mp3 file
        for type, mode in self.downloadChoices:
            self.downloadChoice = Radiobutton(self.root, text= type, font= ('Northwest old', 15), variable= self.userChoice, value= mode, bg= '#ffdddd')
            self.downloadChoice.grid()
        
        self.downloadButton = Button(self.root, text= 'Download', width= 10, font= ('Bell MT', 15), command= self.checkForErrors)
        self.downloadButton.grid(pady= (30, 5))

    #Check for user errors
    def checkForErrors(self):
        self.matchYoutubeLink = re.match('^https://www.youtube.com/.', self.youtubeLink.get())
        if (not self.matchYoutubeLink):
            self.entryError.config(text= 'Invalid YouTube Video Link', fg= 'red')
        elif (not self.openFile):
            self.fileLocationLabel.config(text= 'Please Choose a File Location', fg= 'red')
        elif(self.matchYoutubeLink and self.openFile):
            self.downloadWindow()

    #Launch a new download window
    def downloadWindow(self):
        self.newWindow = Toplevel(self.root)
        self.root.withdraw()
        self.newWindow.state('zoomed')
        self.newWindow.grid_rowconfigure(0, weight= 0)
        self.newWindow.grid_columnconfigure(0, weight= 1)

        self.app = DownloadApp(self.newWindow, self.youtubeLink.get(), self.folderName, self.userChoice.get())

    #Method for user to choose where to download file locally
    def openFile(self):
        self.folderName = filedialog.askdirectory()
        #Validate file location selection
        if(len(self.folderName) > 0): #If file location is selected
            self.fileLocationLabel.config(text= self.folderName, fg= 'green')
            return True
        else: #If file location is not selected
            self.fileLocationLabel.config(text= 'Please Choose a Valid File Location', fg= 'red')
            return False

#Second application that launches upon start of file download
class DownloadApp:

    def __init__(self, downloadWindow, youtubeLink, folderName, choice):
        self.downloadWindow = downloadWindow
        self.youtubeLink = youtubeLink
        self.folderName = folderName
        self.choice = choice

        self.yt = YouTube(self.youtubeLink)
        #Find max file size of video
        if(choice == '1'):
            self.videoType = self.yt.streams.filter(only_audio= True).first()
            self.maxFileSize = self.videoType.filesize
        elif(choice == '2'):
            self.videoType = self.yt.streams.get_highest_resolution()
            self.maxFileSize = self.videoType.filesize

        #Loading Window labels
        self.loadingLabel = Label(self.downloadWindow, text= 'Downloading in Progress...', font= ('Small Fonts', 40))
        self.loadingLabel.grid(pady= (100, 0))

        self.loadingPercent = Label(self.downloadWindow, text= '0', fg= 'green', font= ('Agency Fb', 40))
        self.loadingPercent.grid(pady= (50, 0))

        self.progressBar = ttk.Progressbar(self.downloadWindow, length= 500, orient= 'horizontal', mode= 'indeterminate')
        self.progressBar.grid(pady= (50, 0))
        self.progressBar.start()

        threading.Thread(target= self.yt.register_on_progress_callback(self.showProgress)).start()
        threading.Thread(target= self.downloadFile).start()

    #Actual download of file
    def downloadFile(self):
        if(self.choice == '1'):
            self.yt.streams.filter(only_audio= True).first().download(self.folderName)
        if(self.choice == '2'):
            self.yt.streams.get_highest_resolution().download(self.folderName)
    
    #Show progress of file download
    def showProgress(self, streams= None, Chunks= None, bytesLeft= None):
        self.percentage = float("%0.2f"% (100-(100*(bytesLeft/self.maxFileSize))))
        if(self.percentage <= 99):
            self.loadingPercent.config(text= self.percentage)
        else:
            #Remove labels needed during downloading process
            self.progressBar.stop()
            self.progressBar.grid_forget()
            self.loadingLabel.grid_forget()

            #Add and modify labels to show file download is complete
            self.loadingPercent['text'] = '100'
            self.downloadFinished = Label(self.downloadWindow, text= 'Download Complete', font= ('Agency Fb', 30), fg= 'Green')
            self.downloadFinished.grid(pady= (50, 0))

            self.downloadedFileName = Label(self.downloadWindow, text= '\"' + self.yt.title + '\"', font= ('Terminal', 30))
            self.downloadedFileName.grid(pady= (150, 0))

            megaBytes = float("%0.2f"% (self.maxFileSize/1000000))
            self.downloadSize = Label(self.downloadWindow, text= str(megaBytes) + 'megabytes', font= ('Agency Fb', 20))
            self.downloadSize.grid(pady= (50, 0))

if __name__ == "__main__":
    #Create window GUI
    window = Tk()
    window.title('YouTube Download Manager')
    window.state('zoomed') #Launch window in full screen

    app = FileApplication(window)

    mainloop()